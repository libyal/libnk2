/*
 * Definitions for libnk2
 *
 * Copyright (c) 2008-2009, Joachim Metz <forensics@hoffmannbv.nl>,
 * Hoffmann Investigations. All rights reserved.
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBNK2_DEFINITIONS_H )
#define _LIBNK2_DEFINITIONS_H

#include <libnk2/types.h>

#define LIBNK2_VERSION							@VERSION@

/* The libnk2 version string
 */
#define LIBNK2_VERSION_STRING						"@VERSION@"

/* The libnk2 file access
 * bit 1        set to 1 for read access
 * bit 2        set to 1 for write access
 * bit 3-8      not used
 */
#define LIBNK2_FLAG_READ                        			0x01
/* Reserved: not supported yet */
#define LIBNK2_FLAG_WRITE                       			0x02

/* The libnk2 file access macros
 */
#define LIBNK2_OPEN_READ						( LIBNK2_FLAG_READ )
/* Reserved: not supported yet */
#define LIBNK2_OPEN_WRITE						( LIBNK2_FLAG_WRITE )
/* Reserved: not supported yet */
#define LIBNK2_OPEN_READ_WRITE						( LIBNK2_FLAG_READ | LIBNK2_FLAG_WRITE )

/* The libnk2 file types
 */
enum LIBNK2_FILE_TYPES
{
	LIBNK2_FILE_TYPE_32BIT						= 32,
	LIBNK2_FILE_TYPE_64BIT						= 64
};

/* The libnk2 file content types
 */
enum LIBNK2_FILE_CONTENT_TYPES
{
	LIBNK2_FILE_CONTENT_TYPE_PAB					= (int) 'a',
	LIBNK2_FILE_CONTENT_TYPE_PST					= (int) 'p',
	LIBNK2_FILE_CONTENT_TYPE_OST					= (int) 'o'
};

/* The libnk2 encryption types
 */
enum LIBNK2_ENCRYPTION_TYPES
{
	LIBNK2_ENCRYPTION_TYPE_NONE					= 0,
	LIBNK2_ENCRYPTION_TYPE_COMPRESSIBLE				= 1,
	LIBNK2_ENCRYPTION_TYPE_HIGH					= 2
};

/* The item types
 */
enum LIBNK2_ITEM_TYPES
{
	LIBNK2_ITEM_TYPE_UNDEFINED					= 0,
	LIBNK2_ITEM_TYPE_APPOINTMENT					= (int) 'a',
	LIBNK2_ITEM_TYPE_ATTACHMENT					= (int) 'A',
	LIBNK2_ITEM_TYPE_CONTACT					= (int) 'c',
	LIBNK2_ITEM_TYPE_EMAIL						= (int) 'e',
	LIBNK2_ITEM_TYPE_FOLDER						= (int) 'f',
	LIBNK2_ITEM_TYPE_JOURNAL					= (int) 'j',
	LIBNK2_ITEM_TYPE_NOTE						= (int) 'n',
	LIBNK2_ITEM_TYPE_REPORT 					= (int) 'r',
	LIBNK2_ITEM_TYPE_TASK						= (int) 't',
	LIBNK2_ITEM_TYPE_UNKNOWN					= (int) '?'
};

/* The attachment types
 */
enum LIBNK2_ATTACHMENT_TYPES
{
	LIBNK2_ATTACHMENT_TYPE_UNDEFINED				= 0,
	LIBNK2_ATTACHMENT_TYPE_DATA					= (int) 'd',
	LIBNK2_ATTACHMENT_TYPE_ITEM					= (int) 'i'
};

/* The message importance types
 */
enum LIBNK2_MESSAGE_IMPORTANCE_TYPES
{
	LIBNK2_MESSAGE_IMPORTANCE_TYPE_LOW				= 0,
	LIBNK2_MESSAGE_IMPORTANCE_TYPE_NORMAL				= 1,
	LIBNK2_MESSAGE_IMPORTANCE_TYPE_HIGH				= 2
};

/* The message priority types
 */
enum LIBNK2_MESSAGE_PRIORITY_TYPES
{
	LIBNK2_MESSAGE_PRIORITY_TYPE_NON_URGENT				= -1,
	LIBNK2_MESSAGE_PRIORITY_TYPE_NORMAL				= 0,
	LIBNK2_MESSAGE_PRIORITY_TYPE_URGENT				= 1
};

/* The message sensitivity types
 */
enum LIBNK2_MESSAGE_SENSITIVITY_TYPES
{
	LIBNK2_MESSAGE_SENSITIVITY_TYPE_NONE				= 0,
	LIBNK2_MESSAGE_SENSITIVITY_TYPE_PERSONAL			= 1,
	LIBNK2_MESSAGE_SENSITIVITY_TYPE_PRIVATE				= 2,
	LIBNK2_MESSAGE_SENSITIVITY_TYPE_CONFIDENTIAL			= 3
};

/* The message flags
 */
enum LIBNK2_MESSAGE_FLAGS
{
	LIBNK2_MESSAGE_FLAG_READ					= 0x00000001,
	LIBNK2_MESSAGE_FLAG_UNMODIFIED					= 0x00000002,
	LIBNK2_MESSAGE_FLAG_SUBMIT					= 0x00000004,
	LIBNK2_MESSAGE_FLAG_UNSENT					= 0x00000008,
	LIBNK2_MESSAGE_FLAG_HAS_ATTACHMENTS				= 0x00000010,
	LIBNK2_MESSAGE_FLAG_FROM_ME					= 0x00000020,
	LIBNK2_MESSAGE_FLAG_ASSOCIATED					= 0x00000040,
	LIBNK2_MESSAGE_FLAG_RESEND					= 0x00000080,
	LIBNK2_MESSAGE_FLAG_RN_PENDING					= 0x00000100,
	LIBNK2_MESSAGE_FLAG_NRN_PENDING					= 0x00000200
};

/* The unallocated block type
 */
enum LIBNK2_UNALLOCATED_BLOCK_TYPES
{
	LIBNK2_UNALLOCATED_BLOCK_TYPE_DATA				= (int) 'd',
	LIBNK2_UNALLOCATED_BLOCK_TYPE_INDEX_NODE			= (int) 'i'
};

/* The entry types
 */
enum LIBNK2_ENTRY_TYPES
{
	LIBNK2_ENTRY_TYPE_EXTENDED_ATTRIBUTES_ENTRIES			= 0x0003,
	LIBNK2_ENTRY_TYPE_EXTENDED_ATTRIBUTES_STRINGS			= 0x0004,

	LIBNK2_ENTRY_TYPE_MESSAGE_IMPORTANCE				= 0x0017,

	LIBNK2_ENTRY_TYPE_MESSAGE_TYPE					= 0x001a,

	LIBNK2_ENTRY_TYPE_MESSAGE_PRIORITY				= 0x0026,

	LIBNK2_ENTRY_TYPE_MESSAGE_SENSITIVITY				= 0x0036,
	LIBNK2_ENTRY_TYPE_MESSAGE_SUBJECT				= 0x0037,

	LIBNK2_ENTRY_TYPE_MESSAGE_CLIENT_SUBMIT_TIME			= 0x0039,
	LIBNK2_ENTRY_TYPE_MESSAGE_RECEIVED_BY_NAME			= 0x0040,

	LIBNK2_ENTRY_TYPE_MESSAGE_CONVERSATION_TOPIC			= 0x0070,

	LIBNK2_ENTRY_TYPE_MESSAGE_RECEIVED_BY_EMAIL_ADDRESS		= 0x0076,

	LIBNK2_ENTRY_TYPE_EMAIL_INTERNET_HEADERS			= 0x007d,

	LIBNK2_ENTRY_TYPE_MESSAGE_SENDER_NAME				= 0x0c1a,

	LIBNK2_ENTRY_TYPE_MESSAGE_SENDER_EMAIL_ADDRESS			= 0x0c1f,

	LIBNK2_ENTRY_TYPE_MESSAGE_DELIVERY_TIME				= 0x0e06,
	LIBNK2_ENTRY_TYPE_MESSAGE_FLAGS					= 0x0e07,
	LIBNK2_ENTRY_TYPE_MESSAGE_SIZE					= 0x0e08,

	LIBNK2_ENTRY_TYPE_ATTACHMENT_SIZE				= 0x0e20,

	LIBNK2_ENTRY_TYPE_EMAIL_BODY_PLAIN_TEXT				= 0x1000,

	LIBNK2_ENTRY_TYPE_EMAIL_BODY_COMPRESSED_RTF			= 0x1009,

	LIBNK2_ENTRY_TYPE_EMAIL_BODY_HTML				= 0x1013,

	LIBNK2_ENTRY_TYPE_EMAIL_EML_FILENAME				= 0x10f3,

	LIBNK2_ENTRY_TYPE_DISPLAY_NAME					= 0x3001,

	LIBNK2_ENTRY_TYPE_MESSAGE_CREATION_TIME				= 0x3007,
	LIBNK2_ENTRY_TYPE_MESSAGE_MODIFICATION_TIME			= 0x3008,

	LIBNK2_ENTRY_TYPE_AMOUNT_OF_CONTENT_ITEMS			= 0x3602,
	LIBNK2_ENTRY_TYPE_AMOUNT_OF_UNREAD_CONTENT_ITEMS		= 0x3603,

	LIBNK2_ENTRY_TYPE_HAS_SUB_FOLDERS				= 0x360a,

	LIBNK2_ENTRY_TYPE_FOLDER_CONTENT_TYPE				= 0x3613,

	LIBNK2_ENTRY_TYPE_AMOUNT_OF_ASSOCIATED_CONTENT			= 0x3617,

	LIBNK2_ENTRY_TYPE_ATTACHMENT_DATA_OBJECT			= 0x3701,

	LIBNK2_ENTRY_TYPE_ATTACHMENT_FILENAME_SHORT			= 0x3704,
	LIBNK2_ENTRY_TYPE_ATTACHMENT_METHOD				= 0x3705,

	LIBNK2_ENTRY_TYPE_ATTACHMENT_FILENAME_LONG			= 0x3707,

	LIBNK2_ENTRY_TYPE_CONTACT_COMPANY_NAME				= 0x3a16,

	LIBNK2_ENTRY_TYPE_CONTACT_DEPARTMENT_NAME			= 0x3a18,
	LIBNK2_ENTRY_TYPE_CONTACT_OFFICE_LOCATION			= 0x3a19,

	LIBNK2_ENTRY_TYPE_CONTACT_TITLE					= 0x3a45,

	LIBNK2_ENTRY_TYPE_FOLDER_CHILD_COUNT				= 0x6638,

	LIBNK2_ENTRY_TYPE_ATTACHMENT_LOCAL_DESCRIPTOR_IDENTIFIER	= 0x67f2
};

/* The entry types: 0x8000 - 0x8fff
 */
#define LIBNK2_ENTRY_TYPE_APPOINTMENT_START_TIME			0x8005
#define LIBNK2_ENTRY_TYPE_APPOINTMENT_END_TIME				0x8006

#define LIBNK2_ENTRY_TYPE_APPOINTMENT_LOCATION				0x8008

#define LIBNK2_ENTRY_TYPE_APPOINTMENT_RECURRING				0x8028
#define LIBNK2_ENTRY_TYPE_APPOINTMENT_TIMEZONE				0x8029
#define LIBNK2_ENTRY_TYPE_APPOINTMENT_FIRST_TIME_EFFECTIVE		0x802a
#define LIBNK2_ENTRY_TYPE_APPOINTMENT_LAST_TIME_EFFECTIVE		0x802b

#define LIBNK2_ENTRY_TYPE_CONTACT_FILE_AS				0x80a9

/* The value types
 */
enum LIBNK2_VALUE_TYPES
{
	LIBNK2_VALUE_TYPE_INTEGER_16BIT_SIGNED				= 0x0002,
	LIBNK2_VALUE_TYPE_INTEGER_32BIT_SIGNED				= 0x0003,
	LIBNK2_VALUE_TYPE_INTEGER_64BIT_SIGNED				= 0x0006,
	LIBNK2_VALUE_TYPE_BOOLEAN					= 0x000b,
	LIBNK2_VALUE_TYPE_EMBEDDED_OBJECT				= 0x000d,
	LIBNK2_VALUE_TYPE_STRING_ASCII					= 0x001e,
	LIBNK2_VALUE_TYPE_STRING_UNICODE				= 0x001f,
	LIBNK2_VALUE_TYPE_FILETIME					= 0x0040,
	LIBNK2_VALUE_TYPE_GUID						= 0x0048,
	LIBNK2_VALUE_TYPE_BINARY_DATA					= 0x0102
};

/* The ASCII codepages
 */
enum LIBNK2_CODEPAGES
{
	LIBNK2_CODEPAGE_ASCII						= 0x41,
	LIBNK2_CODEPAGE_WINDOWS_1250					= 1250,
	LIBNK2_CODEPAGE_WINDOWS_1251					= 1251,
	LIBNK2_CODEPAGE_WINDOWS_1252					= 1252,
	LIBNK2_CODEPAGE_WINDOWS_1253					= 1253,
	LIBNK2_CODEPAGE_WINDOWS_1254					= 1254,
	LIBNK2_CODEPAGE_WINDOWS_1255					= 1255,
	LIBNK2_CODEPAGE_WINDOWS_1256					= 1256,
	LIBNK2_CODEPAGE_WINDOWS_1257					= 1257,
	LIBNK2_CODEPAGE_WINDOWS_1258					= 1258
};

#define LIBNK2_CODEPAGE_WINDOWS_CENTRAL_EUROPEAN			LIBNK2_CODEPAGE_WINDOWS_1250
#define LIBNK2_CODEPAGE_WINDOWS_CYRILLIC				LIBNK2_CODEPAGE_WINDOWS_1251
#define LIBNK2_CODEPAGE_WINDOWS_WESTERN_EUROPEAN			LIBNK2_CODEPAGE_WINDOWS_1252
#define LIBNK2_CODEPAGE_WINDOWS_GREEK					LIBNK2_CODEPAGE_WINDOWS_1253
#define LIBNK2_CODEPAGE_WINDOWS_TURKISH					LIBNK2_CODEPAGE_WINDOWS_1254
#define LIBNK2_CODEPAGE_WINDOWS_HEBREW					LIBNK2_CODEPAGE_WINDOWS_1255
#define LIBNK2_CODEPAGE_WINDOWS_ARABIC					LIBNK2_CODEPAGE_WINDOWS_1256
#define LIBNK2_CODEPAGE_WINDOWS_BALTIC					LIBNK2_CODEPAGE_WINDOWS_1257
#define LIBNK2_CODEPAGE_WINDOWS_VIETNAMESE				LIBNK2_CODEPAGE_WINDOWS_1258

#endif

