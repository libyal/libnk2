/*
 * Library to support the Nickfile (NK2) format
 *
 * Copyright (c) 2010, Joachim Metz <jbmetz@users.sourceforge.net>
 * Copyright (c) 2009, Joachim Metz <forensics@hoffmannbv.nl>,
 * Hoffmann Investigations.
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBNK2_H )
#define _LIBNK2_H

#include <libnk2/codepage.h>
#include <libnk2/definitions.h>
#include <libnk2/error.h>
#include <libnk2/extern.h>
#include <libnk2/features.h>
#include <libnk2/mapi.h>
#include <libnk2/types.h>

#include <stdio.h>

#if defined( LIBNK2_HAVE_BFIO )
#include <libbfio.h>
#endif

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Support functions
 * ------------------------------------------------------------------------- */

/* Returns the library version
 */
LIBNK2_EXTERN const char *libnk2_get_version(
                           void );

/* Determines if a file is a NK2 file (check for the NK2 file signature)
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBNK2_EXTERN int libnk2_check_file_signature(
                   const char *filename,
                   libnk2_error_t **error );

#if defined( LIBNK2_HAVE_WIDE_CHARACTER_TYPE )
/* Determines if a file is a NK2 file (check for the NK2 file signature)
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBNK2_EXTERN int libnk2_check_file_signature_wide(
                   const wchar_t *filename,
                   libnk2_error_t **error );
#endif

#if defined( LIBNK2_HAVE_BFIO )
/* Determines if a file is a NK2 file (check for the NK2 file signature) using a Basic File IO (bfio) handle
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBNK2_EXTERN int libnk2_check_file_signature_file_io_handle(
                   libbfio_handle_t *file_io_handle,
                   libnk2_error_t **error );
#endif

/* -------------------------------------------------------------------------
 * Notify functions
 * ------------------------------------------------------------------------- */

/* Sets the verbose notification
 */
LIBNK2_EXTERN void libnk2_notify_set_verbose(
                    int verbose );

/* Sets the notification stream
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_notify_set_stream(
                   FILE *stream,
                   libnk2_error_t **error );

/* Opens the notification stream using a filename
 * The stream is opened in append mode
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_notify_stream_open(
                   const char *filename,
                   libnk2_error_t **error );

/* Closes the notification stream if opened using a filename
 * Returns 0 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_notify_stream_close(
                   libnk2_error_t **error );

/* -------------------------------------------------------------------------
 * Error functions
 * ------------------------------------------------------------------------- */

/* Frees the error including elements
 */
LIBNK2_EXTERN void libnk2_error_free(
                    libnk2_error_t **error );

/* Prints a descriptive string of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_error_fprint(
                   libnk2_error_t *error,
                   FILE *stream );

/* Prints a descriptive string of the error to the string
 * Returns the number of printed characters if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_error_sprint(
                   libnk2_error_t *error,
                   char *string,
                   size_t size );

/* Prints a backtrace of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_error_backtrace_fprint(
                   libnk2_error_t *error,
                   FILE *stream );

/* Prints a backtrace of the error to the string
 * Returns the number of printed characters if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_error_backtrace_sprint(
                   libnk2_error_t *error,
                   char *string,
                   size_t size );

/* -------------------------------------------------------------------------
 * File functions
 * ------------------------------------------------------------------------- */

/* Initializes the Nickfile
 * Make sure the value file is pointing to is set to NULL
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_initialize(
                   libnk2_file_t **file,
                   libnk2_error_t **error );

/* Frees an exisisting Nickfile
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_free(
                   libnk2_file_t **file,
                   libnk2_error_t **error );

/* Signals the libnk2 file to abort its current activity
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_signal_abort(
                   libnk2_file_t *file,
                   libnk2_error_t **error );

/* Opens a Nickfile
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_open(
                   libnk2_file_t *file,
                   const char *filename,
                   int flags,
                   libnk2_error_t **error );

#if defined( LIBNK2_HAVE_WIDE_CHARACTER_TYPE )
/* Opens a Nickfile
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_open_wide(
                   libnk2_file_t *file,
                   const wchar_t *filename,
                   int flags,
                   libnk2_error_t **error );
#endif

#if defined( LIBNK2_HAVE_BFIO )
/* Opens a Nickfile using a Basic File IO (bfio) handle
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_open_file_io_handle(
                   libnk2_file_t *file,
                   libbfio_handle_t *file_io_handle,
                   int flags,
                   libnk2_error_t **error );
#endif

/* Closes a Nickfile
 * Returns 0 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_close(
                   libnk2_file_t *file,
                   libnk2_error_t **error );

/* Retrieves the file ASCII codepage
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_get_ascii_codepage(
                   libnk2_file_t *file,
                   int *ascii_codepage,
                   libnk2_error_t **error );

/* Sets the file ASCII codepage
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_set_ascii_codepage(
                   libnk2_file_t *file,
                   int ascii_codepage,
                   libnk2_error_t **error );

/* Retrieves the number of items
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_get_number_of_items(
                   libnk2_file_t *file,
                   int *number_of_items,
                   libnk2_error_t **error );

/* Retrieves the amount of items
 * Returns 1 if successful or -1 on error
 *
 * This function is deprecated use libnk2_file_get_number_of_items instead
 */
LIBNK2_DEPRECATED \
LIBNK2_EXTERN int libnk2_file_get_amount_of_items(
                   libnk2_file_t *file,
                   int *amount_of_items,
                   libnk2_error_t **error );

/* Retrieves a specific item
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_file_get_item(
                   libnk2_file_t *file,
                   int item_index,
                   libnk2_item_t **item,
                   libnk2_error_t **error );

/* -------------------------------------------------------------------------
 * Item functions
 * ------------------------------------------------------------------------- */

/* Frees an item
 * Detaches the reference from the file if necessary
 * Return 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_free(
                   libnk2_item_t **item,
                   libnk2_error_t **error );

/* Retrieves the identifier of a specific entry from the item
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_identifier(
                   libnk2_item_t *item,
                   uint32_t *identifier,
                   libnk2_error_t **error );

/* Retrieves the number of entries of the referenced item
 * All sets in an item contain the same number of entries
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_number_of_entries(
                   libnk2_item_t *item,
                   uint32_t *number_of_entries,
                   libnk2_error_t **error );

/* Retrieves the amount of entries of the referenced item
 * All sets in an item contain the same amount of entries
 * Returns 1 if successful or -1 on error
 *
 * This function is deprecated use libnk2_item_get_number_of_entries instead
 */
LIBNK2_DEPRECATED \
LIBNK2_EXTERN int libnk2_item_get_amount_of_entries(
                   libnk2_item_t *item,
                   uint32_t *amount_of_entries,
                   libnk2_error_t **error );

/* Retrieves the entry and value type of a specific entry from the referenced item
 * The name to id map entry is set when available
 * Returns 1 if successful or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_type(
                   libnk2_item_t *item,
                   int entry_index,
                   uint32_t *entry_type,
                   uint32_t *value_type,
                   libnk2_error_t **error );

/* Retrieves the value of a specific entry from the referenced item
 *
 * When the LIBNK2_ENTRY_VALUE_FLAG_MATCH_ANY_VALUE_TYPE is set
 * the value type is ignored and set. The default behavior is a strict
 * matching of the value type. In this case the value type must be filled
 * with the corresponding value type
 *
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   uint32_t *value_type,
                   uint8_t **value_data,
                   size_t *value_data_size,
                   uint8_t flags,
                   libnk2_error_t **error );

/* Retrieves the boolean value of a specific entry from the referenced item
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_boolean(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   uint8_t *entry_value,
                   libnk2_error_t **error );

/* Retrieves the 32-bit value of a specific entry from the referenced item
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_32bit(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   uint32_t *entry_value,
                   libnk2_error_t **error );

/* Retrieves the 64-bit value of a specific entry from the referenced item
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_64bit(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   uint64_t *entry_value,
                   libnk2_error_t **error );

/* Retrieves the size value of a specific entry from the referenced item
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_size(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   size_t *entry_value,
                   libnk2_error_t **error );

/* Retrieves the UTF-8 string size of a string value of a specific entry from the referenced item
 * The returned size includes the end of string character
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_utf8_string_size(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   size_t *utf8_string_size,
                   libnk2_error_t **error );

/* Retrieves the UTF-8 string value of a specific entry from the referenced item
 * The string is formatted in UTF-8
 * The function uses a codepage if necessary, it uses the codepage set for the library
 * The size should include the end of string character
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_utf8_string(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   uint8_t *utf8_string,
                   size_t utf8_string_size,
                   libnk2_error_t **error );

/* Retrieves the UTF-16 string size of a string value of a specific entry from the referenced item
 * The returned size includes the end of string character
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_utf16_string_size(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   size_t *utf16_string_size,
                   libnk2_error_t **error );

/* Retrieves the UTF-16 string value of a specific entry from the referenced item
 * The string is formatted in UTF-16
 * The function uses a codepage if necessary, it uses the codepage set for the library
 * The size should include the end of string character
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_utf16_string(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   uint8_t *utf16_string,
                   size_t utf16_string_size,
                   libnk2_error_t **error );

/* Retrieves the size of a binary data value of a specific entry from the referenced item
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_binary_data_size(
                   libnk2_item_t *item,
                   int set_index,
                   uint32_t entry_type,
                   size_t *size,
                   libnk2_error_t **error );

/* Retrieves the binary data value of a specific entry from the referenced item
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_binary_data(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   uint8_t *binary_data,
                   size_t size,
                   libnk2_error_t **error );

/* Retrieves the GUID value of a specific entry from the referenced item
 * Returns 1 if successful, 0 if the item does not contain such value or -1 on error
 */
LIBNK2_EXTERN int libnk2_item_get_entry_value_guid(
                   libnk2_item_t *item,
                   uint32_t entry_type,
                   uint8_t *guid,
                   size_t size,
                   libnk2_error_t **error );

#if defined( __cplusplus )
}
#endif

#endif

